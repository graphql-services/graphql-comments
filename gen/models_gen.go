// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CommentFilterType struct {
	And             []*CommentFilterType `json:"AND"`
	Or              []*CommentFilterType `json:"OR"`
	ID              *string              `json:"id"`
	IDNe            *string              `json:"id_ne"`
	IDGt            *string              `json:"id_gt"`
	IDLt            *string              `json:"id_lt"`
	IDGte           *string              `json:"id_gte"`
	IDLte           *string              `json:"id_lte"`
	IDIn            []string             `json:"id_in"`
	IDNull          *bool                `json:"id_null"`
	Reference       *string              `json:"reference"`
	ReferenceNe     *string              `json:"reference_ne"`
	ReferenceGt     *string              `json:"reference_gt"`
	ReferenceLt     *string              `json:"reference_lt"`
	ReferenceGte    *string              `json:"reference_gte"`
	ReferenceLte    *string              `json:"reference_lte"`
	ReferenceIn     []string             `json:"reference_in"`
	ReferenceLike   *string              `json:"reference_like"`
	ReferencePrefix *string              `json:"reference_prefix"`
	ReferenceSuffix *string              `json:"reference_suffix"`
	ReferenceNull   *bool                `json:"reference_null"`
	ReferenceID     *string              `json:"referenceID"`
	ReferenceIDNe   *string              `json:"referenceID_ne"`
	ReferenceIDGt   *string              `json:"referenceID_gt"`
	ReferenceIDLt   *string              `json:"referenceID_lt"`
	ReferenceIDGte  *string              `json:"referenceID_gte"`
	ReferenceIDLte  *string              `json:"referenceID_lte"`
	ReferenceIDIn   []string             `json:"referenceID_in"`
	ReferenceIDNull *bool                `json:"referenceID_null"`
	Text            *string              `json:"text"`
	TextNe          *string              `json:"text_ne"`
	TextGt          *string              `json:"text_gt"`
	TextLt          *string              `json:"text_lt"`
	TextGte         *string              `json:"text_gte"`
	TextLte         *string              `json:"text_lte"`
	TextIn          []string             `json:"text_in"`
	TextLike        *string              `json:"text_like"`
	TextPrefix      *string              `json:"text_prefix"`
	TextSuffix      *string              `json:"text_suffix"`
	TextNull        *bool                `json:"text_null"`
	UpdatedAt       *time.Time           `json:"updatedAt"`
	UpdatedAtNe     *time.Time           `json:"updatedAt_ne"`
	UpdatedAtGt     *time.Time           `json:"updatedAt_gt"`
	UpdatedAtLt     *time.Time           `json:"updatedAt_lt"`
	UpdatedAtGte    *time.Time           `json:"updatedAt_gte"`
	UpdatedAtLte    *time.Time           `json:"updatedAt_lte"`
	UpdatedAtIn     []*time.Time         `json:"updatedAt_in"`
	UpdatedAtNull   *bool                `json:"updatedAt_null"`
	CreatedAt       *time.Time           `json:"createdAt"`
	CreatedAtNe     *time.Time           `json:"createdAt_ne"`
	CreatedAtGt     *time.Time           `json:"createdAt_gt"`
	CreatedAtLt     *time.Time           `json:"createdAt_lt"`
	CreatedAtGte    *time.Time           `json:"createdAt_gte"`
	CreatedAtLte    *time.Time           `json:"createdAt_lte"`
	CreatedAtIn     []*time.Time         `json:"createdAt_in"`
	CreatedAtNull   *bool                `json:"createdAt_null"`
	UpdatedBy       *string              `json:"updatedBy"`
	UpdatedByNe     *string              `json:"updatedBy_ne"`
	UpdatedByGt     *string              `json:"updatedBy_gt"`
	UpdatedByLt     *string              `json:"updatedBy_lt"`
	UpdatedByGte    *string              `json:"updatedBy_gte"`
	UpdatedByLte    *string              `json:"updatedBy_lte"`
	UpdatedByIn     []string             `json:"updatedBy_in"`
	UpdatedByNull   *bool                `json:"updatedBy_null"`
	CreatedBy       *string              `json:"createdBy"`
	CreatedByNe     *string              `json:"createdBy_ne"`
	CreatedByGt     *string              `json:"createdBy_gt"`
	CreatedByLt     *string              `json:"createdBy_lt"`
	CreatedByGte    *string              `json:"createdBy_gte"`
	CreatedByLte    *string              `json:"createdBy_lte"`
	CreatedByIn     []string             `json:"createdBy_in"`
	CreatedByNull   *bool                `json:"createdBy_null"`
}

type CommentSortType struct {
	ID          *ObjectSortType `json:"id"`
	Reference   *ObjectSortType `json:"reference"`
	ReferenceID *ObjectSortType `json:"referenceID"`
	Text        *ObjectSortType `json:"text"`
	UpdatedAt   *ObjectSortType `json:"updatedAt"`
	CreatedAt   *ObjectSortType `json:"createdAt"`
	UpdatedBy   *ObjectSortType `json:"updatedBy"`
	CreatedBy   *ObjectSortType `json:"createdBy"`
}

type CompanyFilterType struct {
	And           []*CompanyFilterType `json:"AND"`
	Or            []*CompanyFilterType `json:"OR"`
	ID            *string              `json:"id"`
	IDNe          *string              `json:"id_ne"`
	IDGt          *string              `json:"id_gt"`
	IDLt          *string              `json:"id_lt"`
	IDGte         *string              `json:"id_gte"`
	IDLte         *string              `json:"id_lte"`
	IDIn          []string             `json:"id_in"`
	IDNull        *bool                `json:"id_null"`
	Name          *string              `json:"name"`
	NameNe        *string              `json:"name_ne"`
	NameGt        *string              `json:"name_gt"`
	NameLt        *string              `json:"name_lt"`
	NameGte       *string              `json:"name_gte"`
	NameLte       *string              `json:"name_lte"`
	NameIn        []string             `json:"name_in"`
	NameLike      *string              `json:"name_like"`
	NamePrefix    *string              `json:"name_prefix"`
	NameSuffix    *string              `json:"name_suffix"`
	NameNull      *bool                `json:"name_null"`
	UpdatedAt     *time.Time           `json:"updatedAt"`
	UpdatedAtNe   *time.Time           `json:"updatedAt_ne"`
	UpdatedAtGt   *time.Time           `json:"updatedAt_gt"`
	UpdatedAtLt   *time.Time           `json:"updatedAt_lt"`
	UpdatedAtGte  *time.Time           `json:"updatedAt_gte"`
	UpdatedAtLte  *time.Time           `json:"updatedAt_lte"`
	UpdatedAtIn   []*time.Time         `json:"updatedAt_in"`
	UpdatedAtNull *bool                `json:"updatedAt_null"`
	CreatedAt     *time.Time           `json:"createdAt"`
	CreatedAtNe   *time.Time           `json:"createdAt_ne"`
	CreatedAtGt   *time.Time           `json:"createdAt_gt"`
	CreatedAtLt   *time.Time           `json:"createdAt_lt"`
	CreatedAtGte  *time.Time           `json:"createdAt_gte"`
	CreatedAtLte  *time.Time           `json:"createdAt_lte"`
	CreatedAtIn   []*time.Time         `json:"createdAt_in"`
	CreatedAtNull *bool                `json:"createdAt_null"`
	UpdatedBy     *string              `json:"updatedBy"`
	UpdatedByNe   *string              `json:"updatedBy_ne"`
	UpdatedByGt   *string              `json:"updatedBy_gt"`
	UpdatedByLt   *string              `json:"updatedBy_lt"`
	UpdatedByGte  *string              `json:"updatedBy_gte"`
	UpdatedByLte  *string              `json:"updatedBy_lte"`
	UpdatedByIn   []string             `json:"updatedBy_in"`
	UpdatedByNull *bool                `json:"updatedBy_null"`
	CreatedBy     *string              `json:"createdBy"`
	CreatedByNe   *string              `json:"createdBy_ne"`
	CreatedByGt   *string              `json:"createdBy_gt"`
	CreatedByLt   *string              `json:"createdBy_lt"`
	CreatedByGte  *string              `json:"createdBy_gte"`
	CreatedByLte  *string              `json:"createdBy_lte"`
	CreatedByIn   []string             `json:"createdBy_in"`
	CreatedByNull *bool                `json:"createdBy_null"`
	Employees     *PersonFilterType    `json:"employees"`
}

type CompanySortType struct {
	ID           *ObjectSortType `json:"id"`
	Name         *ObjectSortType `json:"name"`
	UpdatedAt    *ObjectSortType `json:"updatedAt"`
	CreatedAt    *ObjectSortType `json:"createdAt"`
	UpdatedBy    *ObjectSortType `json:"updatedBy"`
	CreatedBy    *ObjectSortType `json:"createdBy"`
	EmployeesIds *ObjectSortType `json:"employeesIds"`
	Employees    *PersonSortType `json:"employees"`
}

type PersonFilterType struct {
	And           []*PersonFilterType `json:"AND"`
	Or            []*PersonFilterType `json:"OR"`
	ID            *string             `json:"id"`
	IDNe          *string             `json:"id_ne"`
	IDGt          *string             `json:"id_gt"`
	IDLt          *string             `json:"id_lt"`
	IDGte         *string             `json:"id_gte"`
	IDLte         *string             `json:"id_lte"`
	IDIn          []string            `json:"id_in"`
	IDNull        *bool               `json:"id_null"`
	Name          *string             `json:"name"`
	NameNe        *string             `json:"name_ne"`
	NameGt        *string             `json:"name_gt"`
	NameLt        *string             `json:"name_lt"`
	NameGte       *string             `json:"name_gte"`
	NameLte       *string             `json:"name_lte"`
	NameIn        []string            `json:"name_in"`
	NameLike      *string             `json:"name_like"`
	NamePrefix    *string             `json:"name_prefix"`
	NameSuffix    *string             `json:"name_suffix"`
	NameNull      *bool               `json:"name_null"`
	UpdatedAt     *time.Time          `json:"updatedAt"`
	UpdatedAtNe   *time.Time          `json:"updatedAt_ne"`
	UpdatedAtGt   *time.Time          `json:"updatedAt_gt"`
	UpdatedAtLt   *time.Time          `json:"updatedAt_lt"`
	UpdatedAtGte  *time.Time          `json:"updatedAt_gte"`
	UpdatedAtLte  *time.Time          `json:"updatedAt_lte"`
	UpdatedAtIn   []*time.Time        `json:"updatedAt_in"`
	UpdatedAtNull *bool               `json:"updatedAt_null"`
	CreatedAt     *time.Time          `json:"createdAt"`
	CreatedAtNe   *time.Time          `json:"createdAt_ne"`
	CreatedAtGt   *time.Time          `json:"createdAt_gt"`
	CreatedAtLt   *time.Time          `json:"createdAt_lt"`
	CreatedAtGte  *time.Time          `json:"createdAt_gte"`
	CreatedAtLte  *time.Time          `json:"createdAt_lte"`
	CreatedAtIn   []*time.Time        `json:"createdAt_in"`
	CreatedAtNull *bool               `json:"createdAt_null"`
	UpdatedBy     *string             `json:"updatedBy"`
	UpdatedByNe   *string             `json:"updatedBy_ne"`
	UpdatedByGt   *string             `json:"updatedBy_gt"`
	UpdatedByLt   *string             `json:"updatedBy_lt"`
	UpdatedByGte  *string             `json:"updatedBy_gte"`
	UpdatedByLte  *string             `json:"updatedBy_lte"`
	UpdatedByIn   []string            `json:"updatedBy_in"`
	UpdatedByNull *bool               `json:"updatedBy_null"`
	CreatedBy     *string             `json:"createdBy"`
	CreatedByNe   *string             `json:"createdBy_ne"`
	CreatedByGt   *string             `json:"createdBy_gt"`
	CreatedByLt   *string             `json:"createdBy_lt"`
	CreatedByGte  *string             `json:"createdBy_gte"`
	CreatedByLte  *string             `json:"createdBy_lte"`
	CreatedByIn   []string            `json:"createdBy_in"`
	CreatedByNull *bool               `json:"createdBy_null"`
	Companies     *CompanyFilterType  `json:"companies"`
}

type PersonSortType struct {
	ID           *ObjectSortType  `json:"id"`
	Name         *ObjectSortType  `json:"name"`
	UpdatedAt    *ObjectSortType  `json:"updatedAt"`
	CreatedAt    *ObjectSortType  `json:"createdAt"`
	UpdatedBy    *ObjectSortType  `json:"updatedBy"`
	CreatedBy    *ObjectSortType  `json:"createdBy"`
	CompaniesIds *ObjectSortType  `json:"companiesIds"`
	Companies    *CompanySortType `json:"companies"`
}

type User struct {
	ID string `json:"id"`
}

type _Service struct {
	Sdl *string `json:"sdl"`
}

type ObjectSortType string

const (
	ObjectSortTypeAsc  ObjectSortType = "ASC"
	ObjectSortTypeDesc ObjectSortType = "DESC"
)

var AllObjectSortType = []ObjectSortType{
	ObjectSortTypeAsc,
	ObjectSortTypeDesc,
}

func (e ObjectSortType) IsValid() bool {
	switch e {
	case ObjectSortTypeAsc, ObjectSortTypeDesc:
		return true
	}
	return false
}

func (e ObjectSortType) String() string {
	return string(e)
}

func (e *ObjectSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ObjectSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ObjectSortType", str)
	}
	return nil
}

func (e ObjectSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
